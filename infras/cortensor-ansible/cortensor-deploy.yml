---
- name: Deploy Cortensor Node
  hosts: all
  become: yes
  vars:
    cortensor_user: cortensor
    cortensor_home: "/home/{{ cortensor_user }}/.cortensor"
    cortensor_bin: "{{ cortensor_home }}/bin"
    cortensor_logs: "{{ cortensor_home }}/logs"
    ipfs_version: "v0.33.0"
    ipfs_package: "kubo_{{ ipfs_version }}_linux-amd64.tar.gz"
    ipfs_url: "https://github.com/ipfs/kubo/releases/download/{{ ipfs_version }}/{{ ipfs_package }}"
    installer_repo: "https://github.com/cortensor/installer"
    temp_dir: "/tmp/cortensor-install"

  vars_files:
    - keys.yml

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install prerequisite packages
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - apt-transport-https
        state: present

    - name: Create apt keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        filename: docker
        state: present

    - name: Update apt cache after adding Docker repo
      apt:
        update_cache: yes

    - name: Install Docker and additional packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
          - git
          - jq
          - lz4
          - build-essential
          - unzip
          - net-tools
          - fail2ban
        state: present

    - name: Upgrade all packages
      apt:
        upgrade: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create temporary directory
      file:
        path: "{{ temp_dir }}"
        state: directory
        mode: '0755'

    - name: Clone Cortensor installer repository
      git:
        repo: "{{ installer_repo }}"
        dest: "{{ temp_dir }}/installer"
        version: "{{ cortensor_branch | default('main') }}"
        force: yes

    - name: Download IPFS package
      get_url:
        url: "{{ ipfs_url }}"
        dest: "{{ temp_dir }}/{{ ipfs_package }}"
        mode: '0644'
      register: ipfs_download

    - name: Extract IPFS package
      unarchive:
        src: "{{ temp_dir }}/{{ ipfs_package }}"
        dest: "{{ temp_dir }}"
        remote_src: yes
      when: ipfs_download is succeeded

    - name: Install IPFS
      shell: ./install.sh
      args:
        chdir: "{{ temp_dir }}/kubo"
      register: ipfs_install
      failed_when: ipfs_install.rc != 0

    - name: Create cortensor user
      user:
        name: "{{ cortensor_user }}"
        groups: sudo,docker
        append: yes
        shell: /bin/bash
        create_home: yes

    - name: Create cortensor directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ cortensor_user }}"
        group: "{{ cortensor_user }}"
        mode: '0755'
      loop:
        - "{{ cortensor_home }}"
        - "{{ cortensor_bin }}"
        - "{{ cortensor_logs }}"
        - "{{ cortensor_home }}/llm-files"

    - name: Copy cortensord binary to system bin
      copy:
        src: "{{ temp_dir }}/installer/dist/cortensord"
        dest: /usr/local/bin/cortensord
        mode: '0755'
        remote_src: yes

    - name: Create symbolic link for cortensord
      file:
        src: /usr/local/bin/cortensord
        dest: "{{ cortensor_bin }}/cortensord"
        state: link
        owner: "{{ cortensor_user }}"
        group: "{{ cortensor_user }}"

    - name: Copy start script
      copy:
        src: "{{ temp_dir }}/installer/utils/start-linux.sh"
        dest: "{{ cortensor_bin }}/start-cortensor.sh"
        mode: '0755'
        owner: "{{ cortensor_user }}"
        group: "{{ cortensor_user }}"
        remote_src: yes

    - name: Copy stop script
      copy:
        src: "{{ temp_dir }}/installer/utils/stop-linux.sh"
        dest: "{{ cortensor_bin }}/stop-cortensor.sh"
        mode: '0755'
        owner: "{{ cortensor_user }}"
        group: "{{ cortensor_user }}"
        remote_src: yes

    - name: Prepare key indices per host
      set_fact:
        key_indices: "{{ hostvars[inventory_hostname]['key_pair_index'] | string | replace(' ', '') | split(',') }}"
      when: hostvars[inventory_hostname]['key_pair_index'] is defined

    - name: Deploy multiple instances based on key indices
      block:
        - name: Copy environment file for each instance
          copy:
            src: "{{ temp_dir }}/installer/dist/.env-example"
            dest: "{{ cortensor_home }}/.env-{{ item }}"
            owner: "{{ cortensor_user }}"
            group: "{{ cortensor_user }}"
            mode: '0600'
            remote_src: yes
            force: no
          loop: "{{ key_indices }}"

        - name: Configure RPC_URL in environment files
          lineinfile:
            path: "{{ cortensor_home }}/.env-{{ item }}"
            regexp: '^HOST=.*'
            line: "HOST={{ rpc_url }}"
          when: rpc_url != ""
          loop: "{{ key_indices }}"

        - name: Configure ETH_RPC_URL in environment files
          lineinfile:
            path: "{{ cortensor_home }}/.env-{{ item }}"
            regexp: '^HOST_MAINNET=.*'
            line: "HOST_MAINNET={{ eth_rpc_url }}"
          when: eth_rpc_url != ""
          loop: "{{ key_indices }}"

        - name: Enable IPFS only for the first instance
          lineinfile:
            path: "{{ cortensor_home }}/.env-{{ item }}"
            regexp: '^ENABLE_IPFS_SERVER=.*'
            line: "ENABLE_IPFS_SERVER={{ '1' if item == key_indices[0] else '0' }}"
            create: yes
          loop: "{{ key_indices }}"

        - name: Enable GPU for LLM Manager if gpu_enable is 1
          block:
            - name: Enable GPU flags in env file
              replace:
                path: "{{ cortensor_home }}/.env-{{ item }}"
                regexp: '^LLM_OPTION_GPU=.*'
                replace: "LLM_OPTION_GPU=1"
              loop: "{{ key_indices }}"

            - name: Enable GPU container flag in env file
              replace:
                path: "{{ cortensor_home }}/.env-{{ item }}"
                regexp: '^LLM_GPU_CONTAINER=.*'
                replace: "LLM_GPU_CONTAINER=1"
              loop: "{{ key_indices }}"
          when: (gpu_enable | default(0) | int) == 1

        - name: Enable Docker LLM Manager for all instances
          replace:
            path: "{{ cortensor_home }}/.env-{{ item }}"
            regexp: '^DOCKER_LLM_MANAGER=.*'
            replace: 'DOCKER_LLM_MANAGER=1'
          loop: "{{ key_indices }}"

        - name: Replace LLM_WORKER_BASE_PORT
          replace:
            path: "{{ cortensor_home }}/.env-{{ item }}"
            regexp: '^LLM_WORKER_BASE_PORT=.*'
            replace: "LLM_WORKER_BASE_PORT=20001"
          loop: "{{ key_indices }}"

        - name: Replace LLM_WORKER_PORT_PREFIX
          replace:
            path: "{{ cortensor_home }}/.env-{{ item }}"
            regexp: '^LLM_WORKER_PORT_PREFIX=.*'
            replace: "LLM_WORKER_PORT_PREFIX={{ 100 * (item | int) }}"
          loop: "{{ key_indices }}"

        - name: Replace LLM_WORKER_CONTAINER_NAME_PREFIX
          replace:
            path: "{{ cortensor_home }}/.env-{{ item }}"
            regexp: '^LLM_WORKER_CONTAINER_NAME_PREFIX=.*'
            replace: "LLM_WORKER_CONTAINER_NAME_PREFIX={{ node_prefix }}-{{ item }}-"
          loop: "{{ key_indices }}"

        - name: Inject public key into .env files
          lineinfile:
            path: "{{ cortensor_home }}/.env-{{ item }}"
            regexp: '^NODE_PUBLIC_KEY=.*'
            line: "NODE_PUBLIC_KEY={{ lookup('vars', 'public_key_' + item) }}"
            create: yes
          loop: "{{ key_indices }}"

        - name: Inject private key into .env files
          lineinfile:
            path: "{{ cortensor_home }}/.env-{{ item }}"
            regexp: '^NODE_PRIVATE_KEY=.*'
            line: "NODE_PRIVATE_KEY={{ lookup('vars', 'private_key_' + item) }}"
            create: yes
          loop: "{{ key_indices }}"

        - name: Create cortensor service for each key index
          template:
            src: cortensor-instance.service.j2
            dest: /etc/systemd/system/cortensor-{{ item }}.service
            mode: '0644'
          loop: "{{ key_indices }}"
          notify: reload systemd

        - name: Enable each cortensor instance
          systemd:
            name: "cortensor-{{ item }}"
            enabled: yes
            daemon_reload: yes
          loop: "{{ key_indices }}"
      when: key_indices | length > 0

    - name: Clean up temporary directory
      file:
        path: "{{ temp_dir }}"
        state: absent

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes