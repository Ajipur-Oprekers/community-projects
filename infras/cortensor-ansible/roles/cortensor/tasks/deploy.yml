---
- name: Prepare key indices per host
  set_fact:
    key_indices: "{{ hostvars[inventory_hostname]['key_pair_index'] | string | replace(' ', '') | split(',') }}"
  when: hostvars[inventory_hostname]['key_pair_index'] is defined

- name: Create dir if not exist
  file:
    path: "{{ temp_dir }}/installer/dist"
    state: directory
    mode: '0700'

- name: Download environment file from repo
  get_url:
    url: https://raw.githubusercontent.com/cortensor/installer/refs/heads/main/dist/.env-example
    dest: "{{ temp_dir }}/installer/dist/.env-example"
    mode: '0600'

- name: Copy environment file for each instance
  copy:
    src: "{{ temp_dir }}/installer/dist/.env-example"
    dest: "{{ cortensor_home }}/.env-{{ item }}"
    owner: "{{ cortensor_user }}"
    group: "{{ cortensor_user }}"
    mode: '0600'
    remote_src: yes
    force: no
  loop: "{{ key_indices }}"
  when: key_indices is defined

- name: Configure RPC_URL in environment files
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^HOST=.*'
    line: "HOST={{ rpc_url }}"
    create: yes
  when: rpc_url != ""
  loop: "{{ key_indices }}"

- name: Configure ETH_RPC_URL in environment files
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^HOST_MAINNET=.*'
    line: "HOST_MAINNET={{ eth_rpc_url }}"
    create: yes
  when: eth_rpc_url != ""
  loop: "{{ key_indices }}"

- name: Configure contract runtime in environment files
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^CONTRACT_ADDRESS_RUNTIME=.*'
    line: 'CONTRACT_ADDRESS_RUNTIME="{{ contract_address_runtime }}"'
    create: yes
  when: contract_address_runtime != ""
  loop: "{{ key_indices }}"

- name: Enable IPFS only for specific instance
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^ENABLE_IPFS_SERVER='
    line: "ENABLE_IPFS_SERVER={{ '1' if (ipfs_primary | default(false) | bool) and (item == (key_indices[0] | string)) else '0' }}"
    create: yes
  loop: "{{ key_indices }}"
  when: key_indices is defined and (key_indices | length) > 0

- name: Enable GPU for LLM GPU if gpu_enabled is 1
  block:
    - name: Enable GPU flag in env file
      lineinfile:
        path: "{{ cortensor_home }}/.env-{{ item }}"
        regexp: '^LLM_OPTION_GPU=.*'
        line: 'LLM_OPTION_GPU=1'
        create: yes
      loop: "{{ key_indices }}"

    - name: Enable GPU container flag in env file
      lineinfile:
        path: "{{ cortensor_home }}/.env-{{ item }}"
        regexp: '^LLM_GPU_CONTAINER=.*'
        line: 'LLM_GPU_CONTAINER=1'
        create: yes
      loop: "{{ key_indices }}"
  when: (gpu_enabled | default(0) | int) == 1

- name: Enable Docker LLM GPU Threshold for all instances
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^LLM_OPTION_GPU_THRESHOLD=.*'
    line: 'LLM_OPTION_GPU_THRESHOLD={{ gpu_threshold | default(0) }}'
    create: yes
  loop: "{{ key_indices }}"
  when: gpu_threshold is defined

- name: Enable Docker LLM Manager for all instances
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^DOCKER_LLM_MANAGER=.*'
    line: 'DOCKER_LLM_MANAGER=1'
    create: yes
  loop: "{{ key_indices }}"

- name: Enable LLM_MEMORY_INDEX_DYNAMIC_LOADING
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^LLM_MEMORY_INDEX_DYNAMIC_LOADING=.*'
    line: 'LLM_MEMORY_INDEX_DYNAMIC_LOADING={{ llm_memory_index_dynamic_loading | default(0) }}'
    create: yes
  loop: "{{ key_indices }}"

- name: Configure LLM_WORKER_BASE_PORT in environment files
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^LLM_WORKER_BASE_PORT=.*'
    line: "LLM_WORKER_BASE_PORT=20001"
    create: yes
  loop: "{{ key_indices }}"

- name: Configure LLM_WORKER_PORT_PREFIX in environment files
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^LLM_WORKER_PORT_PREFIX=.*'
    line: "LLM_WORKER_PORT_PREFIX={{ 100 * (item | int) }}"
    create: yes
  loop: "{{ key_indices }}"

- name: Configure LLM_WORKER_CONTAINER_NAME_PREFIX in environment files
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^LLM_WORKER_CONTAINER_NAME_PREFIX=.*'
    line: "LLM_WORKER_CONTAINER_NAME_PREFIX={{ node_prefix }}-{{ item }}-"
    create: yes
  loop: "{{ key_indices }}"

- name: Build list of IP
  set_fact:
    ip_peers: >-
      {{
        groups['all']
        | map('extract', hostvars)
        | selectattr('ansible_host', 'equalto', ansible_host)
        | map(attribute='inventory_hostname')
        | list
      }}

- name: Collect all server based on IP
  set_fact:
    peer_vars: "{{ ip_peers | map('extract', hostvars) | list }}"

- name: Set Primary
  set_fact:
    machine_primary: >-
      {{
        (
          peer_vars
          | selectattr('ipfs_primary','defined')
          | selectattr('ipfs_primary','equalto', true)
          | map(attribute='inventory_hostname')
          | list
        ) | first | default((ip_peers | sort | first))
      }}

- name: Compute total cortensor instances
  set_fact:
    total_instances_on_machine: >-
      {{
        peer_vars
        | map(attribute='key_pair_index')
        | map('default','')
        | map('string')
        | map('regex_replace','\\s+','')
        | map('regex_findall','[^,]+')
        | map('length')
        | sum
      }}

- name: Compute per-instance threads for this host
  set_fact:
    threads_per_instance: >-
      {{
        (
          0
            if (llm_threads is defined and (llm_threads | int) == 0)
          else
            (
              (llm_threads | int)
                if (llm_threads is defined and (llm_threads | int) != 0)
              else
                (
                  ((ansible_processor_vcpus | int) - 2) // (total_instances_on_machine | int)
                    if (total_instances_on_machine | int) > 0
                  else 0
                )
            )
        )
      }}

- name: Configure LLM_OPTION_CPU_THREADS in environment files
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^LLM_OPTION_CPU_THREADS=.*'
    line: "LLM_OPTION_CPU_THREADS={{ threads_per_instance }}"
    create: yes
  loop: "{{ key_indices }}"

- name: Inject public key into .env files
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^NODE_PUBLIC_KEY=.*'
    line: "NODE_PUBLIC_KEY={{ lookup('vars', 'public_key_' + item) }}"
    create: yes
  loop: "{{ key_indices }}"

- name: Inject private key into .env files
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^NODE_PRIVATE_KEY=.*'
    line: "NODE_PRIVATE_KEY={{ lookup('vars', 'private_key_' + item) }}"
    create: yes
  loop: "{{ key_indices }}"

- name: Set IS_L3=1 in environment files if is_l3 is true
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^IS_L3=.*'
    line: "IS_L3={{ is_l3 | default(false) | ternary(1, 0, false) }}"
    create: yes
  loop: "{{ key_indices }}"
  when: is_l3 | default(false) | bool

- name: Set IS_L3=1 in environment files if is_l3 is true
  lineinfile:
    path: "{{ cortensor_home }}/.env-{{ item }}"
    regexp: '^CHAINID=.*'
    line: "CHAINID=12515"
    create: yes
  loop: "{{ key_indices }}"
  when: is_l3 | default(false) | bool

- name: Create cortensor service for each key index
  template:
    src: cortensor-instance.service.j2
    dest: /etc/systemd/system/cortensor-{{ item }}.service
    mode: '0644'
  loop: "{{ key_indices }}"
  when: key_indices is defined
  notify: reload systemd

- name: Ensure polkit rules dir exists
  file:
    path: /etc/polkit-1/rules.d
    state: directory
    mode: '0755'

- name: Allow '{{ cortensor_user }}' to manage cortensor-* via polkit
  copy:
    dest: /etc/polkit-1/rules.d/10-cortensor-manage-units.rules
    mode: '0644'
    force: yes
    content: |
      polkit.addRule(function(action, subject) {
        if (subject.user == "{{ cortensor_user }}" || subject.isInGroup("{{ cortensor_user }}")) {
          if (action.id == "org.freedesktop.systemd1.manage-units" ||
              action.id == "org.freedesktop.systemd1.reload-daemon") {
            var unit = action.lookup("unit");
            var verb = action.lookup("verb");
            var allowedVerbs = ["start", "stop", "restart", "reload", "try-restart"];
            var okUnit = unit && unit.indexOf("cortensor-") === 0 && unit.slice(-8) === ".service";
            var okVerb = allowedVerbs.indexOf(verb) >= 0;

            if (okUnit && okVerb) {
              return polkit.Result.YES;
            }
          }
        }
      });

- name: Enable each cortensor instance
  systemd:
    name: "cortensor-{{ item }}"
    enabled: yes
    daemon_reload: yes
  loop: "{{ key_indices }}"
  when: key_indices is defined
  
- name: Clean up temporary directory
  file:
    path: "{{ temp_dir }}"
    state: absent
  ignore_errors: yes